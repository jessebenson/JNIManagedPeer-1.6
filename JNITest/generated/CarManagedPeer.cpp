/* DO NOT EDIT THIS FILE - it is machine generated */
#include "precomp.h"
#include "CarManagedPeer.h"

namespace JNI { namespace Test { 

CarManagedPeer::CarManagedPeer(jobject object)
	: ::JNI::ManagedPeer(object)
{
}

CarManagedPeer::~CarManagedPeer()
{
}

jclass CarManagedPeer::GetClass()
{
	static ::JNI::JClass clazz("com/jnitest/Car");
	return clazz;
}

jdouble CarManagedPeer::getCost() const
{
	static jmethodID methodID(Env().GetMethodID(GetClass(), "getCost", "()D"));
	return Env().CallDoubleMethod(Object(), methodID);
}

void CarManagedPeer::setCost(jdouble arg0) const
{
	static jmethodID methodID(Env().GetMethodID(GetClass(), "setCost", "(D)V"));
	Env().CallVoidMethod(Object(), methodID, arg0);
}

jint CarManagedPeer::getWheels() const
{
	static jmethodID methodID(Env().GetMethodID(GetClass(), "getWheels", "()I"));
	return Env().CallIntMethod(Object(), methodID);
}

jstring CarManagedPeer::getName() const
{
	static jmethodID methodID(Env().GetMethodID(GetClass(), "getName", "()Ljava/lang/String;"));
	return (jstring)Env().CallObjectMethod(Object(), methodID);
}

jint CarManagedPeer::getCount()
{
	static jmethodID methodID(Env().GetMethodID(GetClass(), "getCount", "()I"));
	return Env().CallStaticIntMethod(methodID);
}

}} // namespace JNI.Test
